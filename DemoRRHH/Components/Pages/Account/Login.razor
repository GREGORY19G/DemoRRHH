@page "/login"

@using System.ComponentModel.DataAnnotations
@using DemoRRHH.Data
@using DemoRRHH.ViewModel
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies

@inject ApplicationDbContext applicationDbContext;
@inject NavigationManager navigationManager;    

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4 shadow-lg" style="width: 400px;">
        <h2 class="text-center mb-4">Login</h2>
        <EditForm Model="@login" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label for="Username">Username</label>
                <InputText id="Username" class="form-control" @bind-Value="@login.Username" />
                <ValidationMessage For="@(() => login.Username)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="@login.Password" />
                <ValidationMessage For="@(() => login.Password)" />
            </div>

            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>

            <button type="submit" class="btn btn-primary w-100">Login</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginViewModel login = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        var userAccount = applicationDbContext.UserAccounts.Where(x => x.Username == login.Username).FirstOrDefault();

        if (userAccount == null || userAccount.Password != login.Password)
        {
            errorMessage = "El usuario o la contraseña es incorrecto";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, userAccount.Username),
            new Claim(ClaimTypes.Role, userAccount.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

    } 
}